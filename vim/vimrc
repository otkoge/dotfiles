if has("macunix")
    " This is needed to disable the highlights of matching "{( etc...
	function! g:FckThatMatchParen ()
		if exists(":NoMatchParen")
			:NoMatchParen
		endif
	endfunction

	augroup plugin_initialize
		autocmd!
		autocmd VimEnter * call FckThatMatchParen()
	augroup END
elseif has("unix")
    let g:system_copy#copy_command = $VIMCLIP
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-easy-align'
Plug 'puremourning/vimspector'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'mattn/emmet-vim'
Plug 'christoomey/vim-system-copy'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'benmills/vimux'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'vim-scripts/indentpython.vim'
Plug 'Valloric/YouCompleteMe'
Plug 'vim-syntastic/syntastic'
Plug 'nvie/vim-flake8'
Plug 'ekalinin/Dockerfile.vim'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug 'vim-python/python-syntax'
Plug 'tmhedberg/SimpylFold'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'dense-analysis/ale'
call plug#end()
" filetype plugin indent on


" python3 from powerline.vim import setup as powerline_setup
" python3 powerline_setup()
" python3 del powerline_setup 

set path+=**                                " Files from all subfolders will tabcomplete
set wildmenu                                " Display all matching file when tabcomplete
set nocompatible                            " Disable vi compatibility (might be superfluous)
set autoread                                " Auto reload changed files
set laststatus=2                            " status bar at the bottom
set t_Co=256                                " Color settings
syntax enable                               " syntax highligh
set number                                  " show line numbers
set relativenumber                          " relative numbers are shown
set ts=4                                    " set tabs to have 4 spaces
set autoindent                              " indent when moving to the next line while writing code
set expandtab                               " expand tabs into spaces
set shiftwidth=4                            " when using the >> or << commands, shift lines by 4 spaces
set cursorline                              " show a visual line under the cursor's current line
set noshowmatch                             " Do not show the matching part of the pair for [] {} and ()
set splitright                              " Open new splits to the right
set splitbelow                              " Open new splits to the bottom
set history=1000                            " Set remembered lines
set hlsearch                                " Highligh searches
set incsearch                               " Show search results as you type
set timeoutlen=1000 ttimeoutlen=0           " Remove timeout when hitting escape
set list
set listchars=tab:>-,eol:$,space:.,trail:x
" set backspace=indent,eol,start              " http://vi.stackexchange.com/a/2163

" Python specific stuff
let python_highlight_all = 1                " enable all Python syntax highlighting features
set foldlevel=99
au BufNewFile,BufRead *.py
    \set tabstop=4
    \set softtabstop=4
    \set textwidth=79
    \set fileformat=unix
    \set foldmethod=indent
    \match BadWhitespace /\s\+$/
    \set encoding=utf-8

au BufNewFile,BufRead *.py noremap <Leader>l :call VimuxRunCommand("pylint " . bufname("%"))<CR>
au BufNewFile,BufRead *.py noremap <Leader>t :call VimuxRunCommand("pytest")<CR>

if $VIRTUAL_ENV != ""
    au BufNewFile,BufRead *.py noremap <Leader>p :call VimuxRunCommand($VIRTUAL_ENV . "/bin/python " . bufname("%"))<CR>
else
    au BufNewFile,BufRead *.py noremap <Leader>p :call VimuxRunCommand("python " . bufname("%"))<CR>
endif

" Go specific stuff
let g:go_fmt_command = "goimports"          " Autoimport on save
autocmd BufNewFile,BufRead *.go set foldmethod=syntax           " Set folding to syntax if it's a go file
autocmd BufNewFile,BufRead *.go noremap <C-a> :GoAlternate<CR>
" autocmd BufNewFile,BufRead *.go noremap <C-d> :GoDoc<CR> " Go docs
autocmd BufNewFile,BufRead *.go noremap <C-r> :GoRename<CR>
" autocmd BufNewFile,BufRead *.go noremap <C-c> <Plug>(go-coverage-toggle)
autocmd BufNewFile,BufRead *.go noremap <C-i> :GoInfo<CR>
autocmd BufNewFile,BufRead *.go noremap <Leader>t :GoTest<CR>
autocmd BufNewFile,BufRead *.go noremap <Leader>l :GoMetaLinter<CR>
autocmd BufNewFile,BufRead *.go noremap <Leader>f :GoTestFunc<CR>
autocmd BufNewFile,BufRead *.go noremap <Leader>r :GoRun<CR>
autocmd BufNewFile,BufRead *.go map <leader>c  <Plug>(go-coverage-toggle)
autocmd BufNewFile,BufRead *.go map <leader>d  :GoDoc<CR>
autocmd BufNewFile,BufRead *.go nmap <leader>i  <Plug>(go-implements)
autocmd BufNewFile,BufRead *.go nmap <leader>di  <Plug>(go-describe)
autocmd BufNewFile,BufRead *.go nmap <leader>cc  <Plug>(go-callers)

" disable all linters as that is taken care of by coc.nvim
let g:go_diagnostics_enabled = 0
let g:go_metalinter_enabled = []
" don't jump to errors after metalinter is invoked
let g:go_jump_to_error = 0
" automatically highlight variable your cursor is on
let g:go_auto_sameids = 0
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1

" JS
autocmd BufNewFile,BufRead *.js set ts=2

" Shortcuts
" quite all with leader q
map <Leader>q :qall<CR>                     " Quit all with Leader+q
nnoremap <C-h> <C-w>h                       " Moving between panes on split screen
nnoremap <C-j> <C-w>j                       " Moving between panes on split screen
nnoremap <C-k> <C-w>k                       " Moving between panes on split screen
nnoremap <C-l> <C-w>l                       " Moving between panes on split screen
nnoremap <space> za                         " fold with space
noremap <Leader>x :call VimuxCloseRunner()<CR>
" Copy to unnamed register
noremap <Leader>d "_
" Toogle NerdTree
map <C-n> :NERDTreeToggle<CR>

" Get off my lawn - helpful when learning Vim :)
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" ALE
let g:ale_linters = {'python': ['flake8', 'pylint']}
let g:ale_fixers = {'*': [], 'python': ['black', 'isort']}
let g:ale_python_black_options="-l 80"
let g:ale_fix_on_save=1
let g:ale_set_highlights=1
let g:ale_set_signs=1
hi StatusLineTerm ctermbg=24 ctermfg=254
hi ALEError ctermbg=Red ctermfg=Green cterm=underline,bold ctermul=Red
hi ALEWarning ctermfg=Yellow cterm=underline ctermul=Yellow
hi ALEInfo cterm=underline 


" YcmSettings
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <C-f> <plug>(YCMHover)
let g:ycm_autoclose_preview_window_after_completion=1


" source ~/.vim/plugins.vim
source ~/.vim/statusline.vim


colo gruvbox
set background=dark
" colo molokai
" let g:molokai_original = 1

" VIMux
let g:VimuxOrientation = "h"
let g:VimuxHeight = "50"

let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_comma = 'all'


"python with virtualenv support

py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  exec(open(activate_this).read(), dict(__file__=activate_this))
EOF
